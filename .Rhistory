flights %>%
filter(dest=="SEA") %>%
group_by(carrier) %>%
count()
flights %>%
filter(dest=="SEA") %>%
group_by(carrier) %>%
summarize(np = tailnum %>% unique() %>% length()) %>%
arrange(desc(np))
planes
md <- full_join(flights,planes, by="tailnum")
dim(md)
names(md)
math_grades <- c(90, 87, 65, 98, 100)
spanish_grades <- c(40, 66, 95, 88, 70)
students <- data.frame("first_names", "math-grades", "spanish_grades")
first_names <- c("Mike", "Amy", "Kate", "John", "Tom")
students <- data.frame("first_names", "math-grades", "spanish_grades")
students
first_names <- c("Mike", "Amy", "Kate", "John", "Tom")
first_names
math_grades <- c(90, 87, 65, 98, 100)
math_grades
spanish_grades <- c(40, 66, 95, 88, 70)
spanish_grades
students <- data.frame("first_names", "math-grades", "spanish_grades")
students
students <- data.frame(first_names, math-grades, spanish_grades)
students
students <- data.frame(first_names, math_grades, spanish_grades)
students
students$grade_diff <- students$math_grades - students$spanish_grades
grade_diff
students$grade_diff <- students$math_grades - students$spanish_grades
students$grade_diff <- students$math_grades - students$spanish_grades
students
students$better_at_math <- students$grade_diff > 0
students
library("titanic")
install.packages("titanic")
library("titanic")
library("titanic")
view("titanic")
head("titanic")
head(titanic)
library(titanic)
titanic
read.csv(titanic)
library(titanic)
life_expectancy <- read.csv(life_expectancy.csv)
life_expectancy
setwd()
setwd("")
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,5, replace=TRUE)
sample(le9,5, replace=TRUE)
x <- sample(6,6, replace=TRUE)
x
library(ggplot2)
qplot(x, geom="histogram", bins=6, col=I("white"))
qplot(x, geom="histogram", bins=6, col="white")
qplot(x, geom="histogram", bins=6)
sample(1e9, 5, replace=TRUE)
x <- sample(6,1e5, replace=TRUE)
x
qplot(x, geom="histogram", bins=6)
qplot(x, geom="histogram", bins=6, col="white")
runif(10)
runif(10)
x <- runif(1000)
qplot(x, geom="histogram", bins=30 ,col=I("white"))
s <- runif(10000)
qplot(s, geom="histogram", bins=30 ,col=I("white"))
s <- runif(1e5)
qplot(s, geom="histogram", bins=30 ,col=I("white"))
s <- runif(1e6)
qplot(s, geom="histogram", bins=30 ,col=I("white"))
s <- runif(1e7)
qplot(s, geom="histogram", bins=30 ,col=I("white"))
s <- runif(1e7)
qplot(s, geom="histogram", bins=2000 ,col=I("white"))
s <- runif(1e7)
qplot(s, geom="histogram", bins=200 ,col=I("white"))
rnorm(10)
x <- rnorm(1000)
qplot(x, geom="histogram", bins=30 ,col=I("white"))
pnorm(-10)
x <- runif(1000)
y <- rnorm(1000)
qplot(x,y,geom="point")
qplot(x, y, geom="point")+geom_smooth()
qplot(x, y, geom="point")+geom_smooth(method = "lm")
qplot(x, y, geom="point")+geom_smooth()
qplot(x, y, geom="point")+geom_smooth(method = "lm")
x <- C-c C-c
x <- runif(1000)
y <- 3*x
x <- C-c C-c
x <- runif(1000)
y <- 3*x
qplot(x, y, geom="point")+geom_smooth(method="lm")
y <- 3*x + rnorm(1000)
qplot(x, y, geom="point")+geom_smooth(method="lm")
x <- runif(1000)
y <- x^2 + rnorm(1000)
qplot(x, y, geom="point")+geom_smooth(method="lm")
x <- runif(1000, -2, 2)
y <- x^2+rnorm(1000)
qplot(x, y, geom="point")+geom_smooth(method="lm")
qplot(x, y, geom="point")+geom_smooth()
qplot(x, y, geom="bin2d")
sample(100,3)
sample(100,3)
sample(100,3)
sample(100,3)
sample(100,3)
sample(100,3)
sample(100,3)
sample(100,3)
m <- numeric()
m <- numeric(1000)
for(i in 1:1000){n <- sample(100,3); m[i] <-  max(n)}
head(m)
qplot(m, geom="histogram")
mean(m)
install.packages("shiny")
library(shiny)
ui <- fluidPage(
mainPanel(
textOutput("hello")
)
)
server <- function(input,output){
output$hello <- renderText("hello world")
}
shinyApp(ui = ui, server = server)
shinyUI((fluidPage(
radioButtons("color", label = "Color",
choice = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
)))
library(shiny)
shinyUI((fluidPage(
radioButtons("color", label = "Color",
choice = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
)))
shinyUI((fluidPage(
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
)))
shinyUI((fluidPage(
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
)))
runApp('Desktop/INFO201/è¯¾/11.20Lecture.R')
shinyServer(functioninput, output) {
output$histogram <- renderPlot({
x <- rnorm(1000)
hist(x, col = input$color)
})
})
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
))
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
plotOutput('histogram')
))
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
plotOutput('histogram')
))
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
plotOutput('histogram')
))
shinyServer(functioninput, output) {
output$histogram <- renderPlot({
x <- rnorm(1000)
hist(x, col = input$color)
})
}
shinyUI(fluidPage(
fluidRow(
column(3,
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
radioButtons("distribution", label = "pick = distribution",
choices = list("normal", "uniform"),
selected = "normal"
)
)
),
plotOutput('histogram')
))
shinyUI(fluidPage(
fluidRow(
column(3,
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
column(3,
radioButtons("distribution", label = "pick = distribution",
choices = list("normal", "uniform"),
selected = "normal"
)
)
)
),
plotOutput('histogram')
))
shinyServer(function(input, output) {
output$histogram <- renderPlot({
x <- rnorm(1000)
hist(x, col = input$color)
})
})
shinyServer(function(input, output) {
output$histogram <- renderPlot({
if(input$distribution == "normal")
x <- rnorm(1000)
hist(x, col = input$color)
})
})
shinyServer(function(input, output) {
output$histogram <- renderPlot({
if(input$distribution == "normal")
x <- rnorm(1000)
else
x <- runif(1000)
h <- hist(x, col = input$color)
})
})
ui <- fluidPage(
mainPanel(
textOutput("hello")
)
)
server <- function(input,output){
output$hello <- renderText("hello world")
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
mainPanel(
textInput("response", label="Say something.", "hello"),
textOutput("comment")
)
)
server <- function(input,output){
output$hello <- renderText({
paste("You said:", input$response)
})
}
shinyApp(ui = ui, server = server)
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
))
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
))
shinyApp(ui = ui, server = server)
shinyUI(fluidPage(
radioButtons("color", label = "Color",
choices = list("Green" = 'green', "Blue" = 'blue'),
selected = 'green'),
plotOutput('histogram')
))
shinyServer(function(input, output) {
output$histogram <- renderPlot({
if(input$distribution == "normal")
x <- rnorm(1000)
else
x <- runif(1000)
x
})
#render a histogram
output$histogram <- renderPlot({
h <- hist(data(), col = input$color)
h
})
})
shinyUI(fluidPage(
fluidRow(
column(3,
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
column(3,
radioButtons("distribution", label = "pick = distribution",
choices = list("normal", "uniform"),
selected = "normal"
)
)
)
),
plotOutput('histogram')
))
shinyUI(fluidPage(
fluidRow(
column(3,
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
column(3,
radioButtons("distribution", label = "pick = distribution",
choices = list("normal", "uniform"),
selected = "normal"
)
)
)
),
plotOutput('histogram')
))
library(shiny)
shinyUI(fluidPage(
fluidRow(
column(3,
radioButtons("color", label = "Color",
choices = list('green', 'blue', 'red'),
selected = 'green'),
column(3,
radioButtons("distribution", label = "pick = distribution",
choices = list("normal", "uniform"),
selected = "normal"
)
)
)
),
plotOutput('histogram')
))
shinyServer(function(input, output) {
output$histogram <- renderPlot({
if(input$distribution == "normal")
x <- rnorm(1000)
else
x <- runif(1000)
x
})
#render a histogram
output$histogram <- renderPlot({
h <- hist(data(), col = input$color)
h
})
})
runApp('456')
runApp('456')
runApp('456')
runApp('456')
runApp('456')
install.packages("FNN")
library(FNN)
createRandomData <- function(n) {
## This function creates random 2d data
## returns a data.frame with two features ('x', 'y')
## and a label 'labels'
##
## n: how many data points
##
R <- 4
# radius of arcs
sd <- 1.6
# sd of radius of points
labels <- factor(rbinom(n, 1, 0.5))
# point type
## create type0 points
r <- rnorm(n, mean=R, sd=sd)
alpha <- runif(n, 0, 1.3*pi)
x0 <- R + r*cos(pi + alpha)
# these are shifted from the origin
y0 <- R/3 + r*sin(pi + alpha)
## create type1 points
r <- rnorm(n, mean=R, sd=sd)
alpha <- runif(n, 0, 1.3*pi)
x1 <- r*cos(alpha)
# not shifted
y1 <- r*sin(alpha)
## select correct points
x <- ifelse(labels == "0", x0, x1)
y <- ifelse(labels == "0", y0, y1)
data.frame(x, y, labels)
}
createRandomData(5)
createRandomData(10)
train <- createRandomData(1000)
head(train)
pred <- createRandomData(1000)
tail(pred)
library(dplyr)
trainX <- train %>% select(x,y)
testX <- pred %>% select(x,y)
head(trainX)
testLabels <- knn(trainX,testX, train$labels) %>% as.numeric()
str(testLabels)
str(train$labels)
testLabels%>% head
testLabels <- knn(trainX,testX, train$labels) %>% as.vector()
testLabels%>%head
table(testLabels,test$labels)
testLabels%>%head
table(testLabels,test$labels)
table(testLabels,pred$labels)
library(ggplot)
ggplot(createRandomData(1000)) + geom_point()
library(ggplot2)
ggplot(createRandomData(1000)) + geom_point()
ggplot(createRandomData(1000))
ggplot(createRandomData(1000))+geom_point(aes(x,y))
ggplot(createRandomData(1000))+geom_point(aes(x,y), color=labels)
ggplot(createRandomData(1000))+geom_point(aes(x,y,color=labels))
train_data <- createRandomData(3000)
pred_data <- createRandomData(2000)
testLabels <- knn(train_data,test_data, train_data$labels) %>% as.vector()
testLabels <- knn(train_data,pred_data, train_data$labels) %>% as.vector()
predLabels <- knn(train_data,pred_data, train$labels) %>% as.vector()
trainLabels <- train %>% select(x,y)
predLabels <- pred %>% select(x,y)
predLabels <- knn(train_data,pred_data, train$labels) %>% as.vector()
predLabels <- knn(train_data,pred_data, train$labels) %>% as.vector()
str(predLabels)
str(train_data$labels)
predLabels%>%head
table(predLabels,pred_data$labels)
test <- read.delim("desktop/info201/ex-machine-learning/ex2-mnist-digits/load_mnist.R")
dim(test)
test <- read.delim("desktop/info201/ex-machine-learning/ex2-mnist-digits/mnist_test.csv")
train <- read.delim("desktop/info201/ex-machine-learning/ex2-mnist-digits/mnist_train.csv")
dim(test)
train[1:10, 1:12]
showDigit(train,4)
test[1:10, 1:12]
showDigit(train,10)
library(dplyr)
showDigit(train,10)
showDigit <- function(data, i, col=gray(12:1/12), ...) {
## data: a data frame, holding the mnist digits data.
## i    which digit: row in the data frame
## col  colors (need 12 colors)
data <- data %>%
select(-label)
# remove the label
pixels <- as.numeric(data[i,]) %>%
matrix(nrow=28)
# transform data to 28x28 matrix (upside down)
pixels <- pixels[,28:1]
# flip the digit upward
image(z=pixels, col=col, ...)
}
showDigit(train,10)
showDigit(train,101)
showDigit(train,1010)
knn(train, test, 5000, 20)
source('~/Desktop/INFO201/ex-machine-learning/ex2-mnist-digits/utils.R')
knn(train, test, 5000, 20)
source('~/Desktop/INFO201/ex-machine-learning/ex2-mnist-digits/utils.R')
a <- knn(train, test, 5000, 20)
table(a$true, a$predicted)
a <- knn(train, test, 5000, 20)
a <- knn(train, test, 5000, 20)
showDigit(test, 2700)
a <- knn(train, test, 5000, 1000)
table(a$true, a$predicted) %>% diag
a <- knn(train, test, 5000, 1000)
table(a$true, a$predicted) %>% diag()%>%sum()
a <- knn(train, test, 15000, 2000, k=3)
table(a$true, a$predicted)
shiny::runApp('histogram')
runApp('histogram')
runApp('histogram')
ui <- fluidPage(
mainPanel(
textOutput("hello")
)
)
server <- function(input,output){
output$hello <- renderText("hello world")
}
shinyApp(ui = ui, server = server)
setwd("desktop/info201/assignments/The-Coolest-repo/")
install.packages("leaflet")
shiny::runApp()
runApp()
runApp()
runApp()
data1 <- data.table::fread("data.cvs")
View(data1)
runApp()
runApp()
