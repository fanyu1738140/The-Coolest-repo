install.packages("stringr")
library("stringr")
integer<-seq(1,100)
length(integer)
print(integer)
integer[2]
source('~/.active-rstudio-document', echo=TRUE)
f <- c(1,a,b,c,d)
f <- c(1,"a","b","c","d")
f
f[c(1,2)]
f[1,2]
f[(1,2)]
f[f=="d"]<-"r"
print(0)
print(0,w)
print(0+"W")
print(0"W")
print("\nW")
milist<- list(1,2,3,c,b,c(1,2,3,4))
milist<- list(1,2,3,"c","b",c(1,2,3,4))
milist
milist[1]
milist[2]
milist[4]
milist[5]
milist[6]
milist[6][1]
milist[6][2]
milist[6][3]
milist[6][7]
employee <- list(name = "Stenve", zip = 98105, students = FALSE)
employee[1]
employee[2]
employee[3]
employee["name"]
employee[[1]]
employee$zip
employee$students
employee
employee$num<- 123
employee$num
employee$number<- c(465,453)
employee$number
employee["number"]
employee["number"][1]
employee
for(i in 222:233){cat("i = ",i , "\n")}
state.name
for (i in satte.name){cat(i)}
state.name
state.abb
state.abb[1]
state.abb[2]
state.abb[3]
hhh<-state.abb
f
f
f
f
for(i in length(state.abb)){print(i)}
for(i in length(state.abb)){print(state.abb[i])}
for(i in 1:length(state.abb)){print(state.abb[i])}
rbinom(1,1,o.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
tosses<-function(){if(rbinom(1,1,0.5)==1){print("y")}else{print("wrong")}}
tosses
tosses()
tosses()
tosses()
tosses()
tosses()
tosses()
tosses()
tosses()
tosses()
df[row,caloum]
df[rows,caloums]
height<-c(1,2,3,4,5,5)
weight<-(6,5,4,3,2,1)
weight<-(6,5,4,3,2,1)
weight<-(65,4,3,2,1)
weight<-c(6,5,4,3,2,1)
health<-dateframe(height, weight)
health<-df(height, weight)
health<-date.frame(height, weight)
health<-data.frame(height, weight)
health
health$weight
health$7weight<-c(q,a,z,w,s,x)
health$7.weight<-c(q,a,z,w,s,x)
health$7.weight<-c("q","a","z","w","s","x")
health$we<-c("q","a","z","w","s","x")
health
health[1,2]
health[3,4
]
health[3,4]
health[3,3]
health[3,4]<-4
health
health[1:2]
health[1:3]
row.names(health)<-c("f","s","s","w","e")
row.names(health)<-c("f","s","s","w","e","e")
row.names(health)<-c("f","s","ss","w","e","ee")
health
health["s"]
health$s
health$s,
health[s,]
health["s",]
health[1,]
health[2,]
View(health)
ncol(health)
health$nihao<- if(health$weight>3){"overweight"}
health$nihao<- if(health$weight>3){"overweight"}else{"n"}
health$nihao<- if(health$weight>3){"overweight"}else{"n"}
health$nihao<- if(health$weight>3){"overweight"}else{"n"}
healt.nro()
healt
health
health$nihao<-"overweight"
tosses()
tosses()
tosses()
tosses()
tosses()
tosses()
View(tosses)
View(tosses)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,2)
rbinom(1,1,3)
rbinom(1,12,2)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,1)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,12,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(2,2,0.5)
rbinom(2,2,0.5)
rbinom(2,2,0.5)
rbinom(2,2,0.5)
rbinom(2,2,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.5)
n<-string(1:10)
n<-list(1:10)
n
n[1]
n[2]
n[[1]]
n&1
n&n
c<-(1,2,3,4)
c<-c(1,2,3,4)
c[1]
c[2]
c[5]
c[5]<-"d
c""
c;
"
c[5]<-"c"
c
c
c
c[5]
nihao<-list(name="Farre",property="cool")
nihao
weight
status<-data.frame(weight,height)
status
status<-data.frame(weight,height,listIsVector=FALSE)
status
status$1
status$weight
status$weight[1]
status$weight[2]
status$weight[6]
status$weight$1
status[1,]
status[1,3]
status[1,3,]
status[3,]
status[3]
status[3,]
status[3]
map1 < -httr::GET('https://www.google.com/maps/search/?api=1&query=centurylink+field')
map1 <-httr::GET('https://www.google.com/maps/search/?api=1&query=centurylink+field')
map1
library(RCurl)
library(RJSONIO)
library(plyr)
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type <- x$results[[1]]$geometry$location_type
formatted_address <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(0.5)
} else {
return(c(NA,NA,NA,NA))
}
}
##Test with a single address
#address #address
#[1] "38.8976831"
#[2] "-77.0364972"
#[3] "APPROXIMATE"
#[4] "The White House, 1600 Pennsylvania Avenue Northwest, Washington, D.C., DC 20500, USA"
# Use plyr to ggeocoding for a vector
address <- c("The White House, Washington, DC", "The Capitol, Washington, DC")
locations <- ldply(address, function(x) geoCode(x))
names(locations) <- c("lat", "lon", "location_type", "formatted")
head(locations)
# lat lon location_type
# 1 38.8976831 -77.0364972 APPROXIMATE
# 2 38.8899389 -77.0090505 APPROXIMATE
#formatted
# 1 The White House, 1600 Pennsylvania Avenue Northwest, Washington, D.C., DC 20500, USA
# 2 United States Capitol, East Capitol St NE & First St, Washington, D.C., DC 20004, USA
map <-
s
install.packages(RCurl)
install.packages('RCurl')
install.packages("RJSONIO")
library(RCurl)
library(RJSONIO)
library(plyr)
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type <- x$results[[1]]$geometry$location_type
formatted_address <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(0.5)
} else {
return(c(NA,NA,NA,NA))
}
}
##Test with a single address
#address #address
#[1] "38.8976831"
#[2] "-77.0364972"
#[3] "APPROXIMATE"
#[4] "The White House, 1600 Pennsylvania Avenue Northwest, Washington, D.C., DC 20500, USA"
# Use plyr to ggeocoding for a vector
address <- c("The White House, Washington, DC", "The Capitol, Washington, DC")
locations <- ldply(address, function(x) geoCode(x))
names(locations) <- c("lat", "lon", "location_type", "formatted")
head(locations)
# lat lon location_type
# 1 38.8976831 -77.0364972 APPROXIMATE
# 2 38.8899389 -77.0090505 APPROXIMATE
#formatted
# 1 The White House, 1600 Pennsylvania Avenue Northwest, Washington, D.C., DC 20500, USA
# 2 United States Capitol, East Capitol St NE & First St, Washington, D.C., DC 20004, USA
install.packages( "ggmap")
library(ggmap)
library("ggplot")
library("ggplot2")
library(ggmap)
qmap('Italy')
qmap('rome')
qmap('seattle')
qmap('seattle', zoom = 15)
qmap('bandra', zoom = 15)
qmap('CenturyLink Field')
"1960-07-24" > as.Data("1960-07-23")
"1960-07-24" > as.Date("1960-07-23")
install.packages("tweenr")
install.packages("gganimate")
install.packages("gganimate")
install.packages("gganimate")
install.packages("FNN")
install.packages("magrittr")
getwd()
setwd("./Desktop/2017auatuw/infomatics\ 201/group/")
setwd("./The-Coolest-repo")
data <- data.table::fread("globalterrorismdb_0617dist.csv")
View(data)
library(dplyr)
data <- data %>% select(iyear, imonth, iday, extended, country_txt,city, latitude, longitude, summary, attacktype1_txt,targtype1_txt, motive, weaptype1_txt)
View(data)
write.csv(data,"./data")
write.csv(data,"./data.cvs")
data1 <- data.table::fread("data")
data1 <- data.table::fread("data.cvs")
View(data1)
ncol(data)
ncol(data1)
install.packages("shinydashboard")
install.packages("leaflet")
install.packages("DT")
View(quakes)
shiny::runApp()
runApp()
runApp()
runApp()
getwd()
setwd("~/Desktop")
setwd("./2017auatuw/infomatics\ 201/group/The-Coolest-repo/")
data1 <- data.table::fread("data.cvs")
runApp('~/.Trash/The-Coolest-repo')
runApp('~/.Trash/The-Coolest-repo')
